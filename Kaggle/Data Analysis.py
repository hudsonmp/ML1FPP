import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport seaborn as snsimport scipy.stats as statsfrom tabulate import tabulate as tbfrom scipy.stats import pearsonrspf = pd.read_csv('/Users/hudsonmitchell-pullman/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Learning to Code/Codecademy/Final Portfolio Project/StudentPerformanceFactors.csv')#spf = spf[['Parental_Involvement', 'Internet_Access', 'Extracurricular_Activities', 'Hours_Studied', 'Sleep_Hours', 'Attendance', 'Teacher_Quality', 'Previous_Scores', 'Exam_Score']]print(tb(spf.head(20), headers='keys', tablefmt='psql'))print(spf.info())print(spf.describe())### 0,1, 2 for parental involvement and teacher quality, or split into three different columns###Internet access should be True False, same w extracurricular### Create a column with difference between new and previousspf['Difference'] = spf['Exam_Score'] - spf['Previous_Scores']spf.Internet_Access = spf.Internet_Access.astype(bool)spf.Extracurricular_Activities = spf.Extracurricular_Activities.astype(bool)spf.replace('Yes', True, inplace=True)spf.replace('No', False, inplace=True)spf['Teacher_Quality'] = spf['Teacher_Quality'].map({'Low': 0, 'Medium': 1, 'High': 2})spf['Parental_Involvement'] = spf['Parental_Involvement'].map({'Low': 0, 'Medium': 1, 'High': 2})print(spf.head())print(spf.nunique())sns.histplot(spf['Exam_Score'])plt.show()plt.clf()print('The standard deviation of the Exam Scores is {}'.format(spf['Exam_Score'].std()))print(stats.skew(spf['Exam_Score']))plt.close()sns.histplot(spf['Previous_Scores'])plt.show()plt.clf()print('The standard deviation of the Previous Exam Scores is {}'.format(spf['Previous_Scores'].std()))print(stats.skew(spf['Previous_Scores']))# Establishing association between final exam scores and the difference.plt.scatter(y = spf['Exam_Score'], x = spf['Previous_Scores'])plt.ylabel('Exam Score')plt.xlabel('Previous Exam Score')plt.show()plt.clf()define, p = pearsonr(spf['Exam_Score'], spf['Previous_Scores'])print('The Pearson covariance metric between the final exam score and the previous score is {}'.format(define))